In JavaScript, there are several ways to work with asynchronous code. 
Here are some of the most common methods for handling asynchronous operations:

Callbacks: A callback function is a function that is passed as an argument to 
another function and is then executed when the asynchronous operation is complete. 
This is a traditional way of handling asynchronous operations in JavaScript, 
but can lead to "callback hell" if there are many nested callbacks.

Promises: Promises are a way to handle asynchronous operations 
that were introduced in ES6. A promise represents a value that 
may not be available yet, but will be at some point in the future. 
A promise can be in one of three states: pending, fulfilled, or rejected. 
Promises provide a way to chain asynchronous operations and handle errors 
more easily than with callbacks.

Async/await: Async/await is a newer way of handling asynchronous operations 
that was introduced in ES7. It provides a way to write asynchronous code that 
looks more like synchronous code. The async keyword is used to declare a function 
that contains asynchronous code, and the await keyword is used to wait for a 
promise to be resolved before continuing.

Async/Await and then/catch are the two ways of handling promises 
whenever an API call is made in js, it returns response as a promise, this promise can be handled by above two methods
